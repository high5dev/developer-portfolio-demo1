import ayla from '/public/image/ayla.jpg';
import crefin from '/public/image/crefin.jpg';
import realEstate from '/public/image/real-estate.jpg';
import travel from '/public/image/travel.jpg';

export const projectsData = [
    {
        id: 1,
        name: 'Facial Skin Analysis & Routine Recommender',
        description: "Developed a facial skin analysis app to recommend a personalized daily skincare routine based on skin analysis results. The app integrates with haut.ai API to analyze users’ facial skin metrics from a selfie. Users input their data via a form stepper UI, which collects the selfie and saves it in MongoDB Atlas. Once the skin metrics are analyzed by haut.ai, the backend stores the results and generates a daily routine displayed through the UI. The entire system architecture was designed and implemented by me, from frontend to backend.",
        tools: ['React', 'Redux','Express', 'Node.js', 'Material UI', 'MongoDB Atlas', 'RESTful API','Third-party API','Netlify (CI/CD)','Agile', 'Figma', 'Lodash'],
        role: 'Full Stack Developer',
        code: 'https://github.com/high5dev/mm-iframe',
        demo: 'https://mm-iframe.onrender.com',
        image: crefin,
    },
    {
        id: 2,
        name: 'Company portfolio for iPromise',
        description: "As a Frontend Developer, I translated the client's vision into a visually appealing, responsive, and user-friendly company portfolio website. Using Next.js components and CSS modules, I implemented responsive design techniques to ensure seamless functionality across devices. The project aimed to present the company’s portfolio in an engaging and professional way, integrating backend technologies for robust functionality",
        tools: ['Next.js', 'Tailwind', 'Express.js', 'Node.js', 'AWS S3', 'AWS SES', 'Node Mailer', 'AWS S3', 'Joi', 'PM2', 'Nginx'],
        role: 'Frontend Developer',
        code: 'https://github.com/high5dev/ipromise',
        demo: 'https://ipromise.vercel.app',
        image: crefin,
    },
    {
        id: 3,
        name: 'MesinKasir - Small Restaurant Website',
        description: "MesinKasir is a small restaurant management website developed using Blazor WebAssembly for both the customer-facing interface and the back-end management portal. The front-end allows customers to browse the restaurant menu, place orders, and view their order status in real-time. The admin panel, built in Blazor as well, allows restaurant staff to manage orders, update the menu, and track sales. The website connects to an ASP.NET Core API for handling back-end services, such as order management and data storage, with data being stored in Azure SQL. For testing, xUnit is used for back-end unit tests, and bUnit is used for Blazor UI tests. End-to-end tests are conducted using Selenium to ensure smooth user experience. The project is deployed to Azure App Service with automated CI/CD pipelines set up through GitHub Actions to handle deployment, build, and testing.",
        tools: ['Blazor', 'JavaScript', 'C#', 'GitHub Actions', 'Selenium', 'bUnit', 'Entity Framework'],
        role: 'Full Stack Developer',
        code: 'https://github.com/high5dev/mesinkasir-restuarant',
        demo: 'https://github.com/high5dev/mesinkasir-restuarant',
        image: crefin,
    },
    {
        id: 4,
        name: 'Blockchain-Based Voting System (DeFi/DApp)',
        description: 'The decentralized voting system is built using Solidity for smart contracts on the Ethereum blockchain. The front-end is developed with React and Web3.js, allowing users to cast votes securely through wallet authentication (MetaMask integration). Smart contracts store votes and ensure transparency and security. For testing, Truffle is used for smart contract unit tests, and Mocha with Web3.js is used to test front-end and blockchain interactions. The DApp is deployed on Infura for blockchain access, while the front-end is hosted on Netlify. Automated deployment and testing pipelines are configured with GitHub Actions.',
        tools: ['Solidity', 'React', 'Web3.js', 'MetaMask', 'Truffle', 'Jest', 'Netlify', 'GitHub Actions'],
        role: 'Blockchain Developer',
        code: '',
        demo: '',
        image: travel,
    },
    {
        id: 5,
        name: 'Survey Analytics Dashboard',
        description: 'This project features a front-end built with React and Chart.js for creating and analyzing surveys. The back-end API is built with Node.js and connected to a MongoDB database for storing survey data. Survey results are dynamically displayed using Chart.js, allowing users to visualize response trends. The front-end uses Redux for state management, and APIs are designed to retrieve data for analytics. For testing, Jest is used for unit and integration tests, while Cypress handles end-to-end testing of survey interactions. The app is deployed to Heroku (back-end) and Vercel (front-end), with CI/CD pipelines via GitHub Actions.',
        tools: ['React', 'Node.js', 'SCSS', 'MongoDB', 'Redux', 'Chart.js', 'Jest', 'Cypress', 'Heroku', 'Vercel', 'Cronjob', 'JWT'],
        code: '',
        role: 'Full Stack Developer',
        demo: '',
        image: realEstate,
    },
    {
        id: 6,
        name: 'AI-Based Email Reply Generator',
        description: "This email automation tool uses a microservices architecture where the back-end is a Python Flask API that hosts a machine learning model trained with TensorFlow for generating email replies. The front-end is built using React, allowing users to interact with the AI-powered service. Email integration is achieved using the Gmail API. For testing, model accuracy is assessed using Scikit-learn, and API routes are tested with PyTest. Front-end testing is done with Jest and React Testing Library. The back-end is deployed to AWS Lambda using a serverless framework, and the front-end is hosted on Vercel. CI/CD pipelines are automated via GitHub Actions.",
        tools: ['Python', 'TensorFlow', 'React', 'AWS Lambda', 'Flask','API Integration', 'Jest'],
        code: '',
        demo: '',
        image: ayla,
        role: 'AI developer',
    },
    {
        id: 7,
        name: 'Cross-Chain DeFi Dashboard',
        description: "This dashboard enables users to monitor and manage assets across multiple blockchains using the Li.Fi SDK. The front-end is built with React and connects to different blockchains via Web3.js to aggregate data in one unified dashboard. The back-end uses Node.js to handle wallet and transaction data. For testing, Jest is used for front-end unit testing, and mock APIs are used to test cross-chain transactions. The application is deployed with Vercel (front-end) and Heroku (back-end), with automated testing and deployment handled via GitHub Actions.",
        tools: ['React', 'Node.js', 'Web3.js', 'Li.Fi SDK', 'Vercel','Heroku', 'Jest'],
        code: '',
        demo: '',
        image: ayla,
        role: 'Blockchain developer',
    },
    {
        id: 8,
        name: 'Music News Website Redesign',
        description: "This project involves migrating an outdated music news website to a modern architecture. The front-end is rebuilt using React and Tailwind CSS for a responsive design, while the back-end is developed using Node.js with Strapi CMS to handle content management. Content is migrated from SQL to MongoDB, and a GraphQL API is implemented for efficient data querying. For testing, Jest is used for unit tests, and Supertest is used for API testing. The front-end is hosted on Netlify, while the back-end runs on Heroku. Deployment is automated using GitHub Actions.",
        tools: ['React', 'Node.js', 'MongoDB', 'Strapi', 'GraphQL','Tailwind CSS', 'Jest', 'Netlify'],
        code: '',
        demo: '',
        image: ayla,
        role: 'Full Stack developer',
    },
    {
        id: 9,
        name: 'Music News Website Redesign',
        description: "The healthcare data platform follows a microservices architecture with React for the front-end and Node.js as the API gateway. It features a tree-structured diagram for visualizing hierarchical patient records using D3.js. MongoDB is used for secure data storage, and role-based access control (RBAC) is implemented for user permissions. For testing, Jest is used for unit tests, while Cypress is used for end-to-end testing. The application is deployed on Azure App Service, with CI/CD pipelines automated through GitHub Actions.",
        tools: ['React', 'Node.js', 'MongoDB', 'D3.js', 'Azure','Tailwind CSS', 'Jest', 'Cypress'],
        code: '',
        demo: '',
        image: ayla,
        role: 'Full Stack developer',
    },
    {
        id: 9,
        name: 'Ecommerce Platform with Cryptocurrency Payment',
        description: "This ecommerce platform is built using the MERN stack (MongoDB, Express, React, Node.js) with integrated cryptocurrency payments via Web3.js. The front-end allows users to browse products, add items to their cart, and pay using traditional methods (Stripe/PayPal) or cryptocurrency (USDC, ETH). The back-end handles order processing, user management, and transaction verification. For testing, unit tests are conducted with Jest, and integration tests are done for payment gateways using Mocha. The application is deployed on Heroku (back-end) and Vercel (front-end) with automated CI/CD pipelines using GitHub Actions.",
        tools: ['React', 'Node.js', 'MongoDB', 'Web3.js', 'Stripe/PayPal Integration','Tailwind CSS', 'Vercel', 'Mocha'],
        code: '',
        demo: '',
        image: ayla,
        role: 'Full Stack developer',
    },
    {
        id: 10,
        name: 'Business Registration Scraper',
        description: "This web scraping tool is developed with Node.js and Puppeteer to automate the extraction of business registration data from state Secretary of State websites. The data is then stored in a MongoDB database and can be exported to CSV or JSON formats. The front-end is built with React to display collected data and offer filtering options. For testing, Jest is used for unit testing, and Mocha is used for integration tests. The scraper is deployed on Heroku with CI/CD pipelines managed via GitHub Actions.",
        tools: ['Node.js', 'Puppeteer', 'MongoDB', 'React', 'Heroku','Tailwind CSS', 'Jest', 'Mocha'],
        code: '',
        demo: '',
        image: ayla,
        role: 'Full Stack developer',
    }
];


// Do not remove any property.
// Leave it blank instead as shown below

// {
//     id: 1,
//     name: '',
//     description: "",
//     tools: [],
//     role: '',
//     code: '',
//     demo: '',
//     image: crefin,
// },